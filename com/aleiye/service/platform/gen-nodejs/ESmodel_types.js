//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var ESTypeEnum_ttypes = require('./ESTypeEnum_types')


var ttypes = module.exports = {};
TQueryModel = module.exports.TQueryModel = function(args) {
  this.a_from = null;
  this.a_to = null;
  this.pageSize = 100;
  this.pageNum = 0;
  this.queryString = null;
  this.userId = null;
  this.type = null;
  this.database = 'aleiye';
  this.isHighlighter = true;
  this.indecies = null;
  this.includeLower = false;
  this.includeUpper = true;
  this.isProcessTime = false;
  this.timeIsAsc = false;
  if (args) {
    if (args.a_from !== undefined) {
      this.a_from = args.a_from;
    }
    if (args.a_to !== undefined) {
      this.a_to = args.a_to;
    }
    if (args.pageSize !== undefined) {
      this.pageSize = args.pageSize;
    }
    if (args.pageNum !== undefined) {
      this.pageNum = args.pageNum;
    }
    if (args.queryString !== undefined) {
      this.queryString = args.queryString;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.database !== undefined) {
      this.database = args.database;
    }
    if (args.isHighlighter !== undefined) {
      this.isHighlighter = args.isHighlighter;
    }
    if (args.indecies !== undefined) {
      this.indecies = args.indecies;
    }
    if (args.includeLower !== undefined) {
      this.includeLower = args.includeLower;
    }
    if (args.includeUpper !== undefined) {
      this.includeUpper = args.includeUpper;
    }
    if (args.isProcessTime !== undefined) {
      this.isProcessTime = args.isProcessTime;
    }
    if (args.timeIsAsc !== undefined) {
      this.timeIsAsc = args.timeIsAsc;
    }
  }
};
TQueryModel.prototype = {};
TQueryModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.a_from = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.a_to = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.pageNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.queryString = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.SET) {
        var _size0 = 0;
        var _rtmp34;
        this.type = [];
        var _etype3 = 0;
        _rtmp34 = input.readSetBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.type.push(elem6);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.database = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.isHighlighter = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.indecies = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString();
          this.indecies.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLower = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.includeUpper = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.isProcessTime = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.timeIsAsc = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TQueryModel.prototype.write = function(output) {
  output.writeStructBegin('TQueryModel');
  if (this.a_from !== null && this.a_from !== undefined) {
    output.writeFieldBegin('a_from', Thrift.Type.I64, 1);
    output.writeI64(this.a_from);
    output.writeFieldEnd();
  }
  if (this.a_to !== null && this.a_to !== undefined) {
    output.writeFieldBegin('a_to', Thrift.Type.I64, 2);
    output.writeI64(this.a_to);
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 3);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  if (this.pageNum !== null && this.pageNum !== undefined) {
    output.writeFieldBegin('pageNum', Thrift.Type.I32, 4);
    output.writeI32(this.pageNum);
    output.writeFieldEnd();
  }
  if (this.queryString !== null && this.queryString !== undefined) {
    output.writeFieldBegin('queryString', Thrift.Type.STRING, 5);
    output.writeString(this.queryString);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 6);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.SET, 7);
    output.writeSetBegin(Thrift.Type.STRING, this.type.length);
    for (var iter14 in this.type)
    {
      if (this.type.hasOwnProperty(iter14))
      {
        iter14 = this.type[iter14];
        output.writeString(iter14);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.database !== null && this.database !== undefined) {
    output.writeFieldBegin('database', Thrift.Type.STRING, 8);
    output.writeString(this.database);
    output.writeFieldEnd();
  }
  if (this.isHighlighter !== null && this.isHighlighter !== undefined) {
    output.writeFieldBegin('isHighlighter', Thrift.Type.BOOL, 9);
    output.writeBool(this.isHighlighter);
    output.writeFieldEnd();
  }
  if (this.indecies !== null && this.indecies !== undefined) {
    output.writeFieldBegin('indecies', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.indecies.length);
    for (var iter15 in this.indecies)
    {
      if (this.indecies.hasOwnProperty(iter15))
      {
        iter15 = this.indecies[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.includeLower !== null && this.includeLower !== undefined) {
    output.writeFieldBegin('includeLower', Thrift.Type.BOOL, 11);
    output.writeBool(this.includeLower);
    output.writeFieldEnd();
  }
  if (this.includeUpper !== null && this.includeUpper !== undefined) {
    output.writeFieldBegin('includeUpper', Thrift.Type.BOOL, 12);
    output.writeBool(this.includeUpper);
    output.writeFieldEnd();
  }
  if (this.isProcessTime !== null && this.isProcessTime !== undefined) {
    output.writeFieldBegin('isProcessTime', Thrift.Type.BOOL, 13);
    output.writeBool(this.isProcessTime);
    output.writeFieldEnd();
  }
  if (this.timeIsAsc !== null && this.timeIsAsc !== undefined) {
    output.writeFieldBegin('timeIsAsc', Thrift.Type.BOOL, 14);
    output.writeBool(this.timeIsAsc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TScanModel = module.exports.TScanModel = function(args) {
  this.scanfields = null;
  this.scanSize = 1000;
  this.scrollID = null;
  if (args) {
    if (args.scanfields !== undefined) {
      this.scanfields = args.scanfields;
    }
    if (args.scanSize !== undefined) {
      this.scanSize = args.scanSize;
    }
    if (args.scrollID !== undefined) {
      this.scrollID = args.scrollID;
    }
  }
};
TScanModel.prototype = {};
TScanModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.scanfields = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.scanfields.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.scanSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.scrollID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TScanModel.prototype.write = function(output) {
  output.writeStructBegin('TScanModel');
  if (this.scanfields !== null && this.scanfields !== undefined) {
    output.writeFieldBegin('scanfields', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.scanfields.length);
    for (var iter23 in this.scanfields)
    {
      if (this.scanfields.hasOwnProperty(iter23))
      {
        iter23 = this.scanfields[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.scanSize !== null && this.scanSize !== undefined) {
    output.writeFieldBegin('scanSize', Thrift.Type.I32, 2);
    output.writeI32(this.scanSize);
    output.writeFieldEnd();
  }
  if (this.scrollID !== null && this.scrollID !== undefined) {
    output.writeFieldBegin('scrollID', Thrift.Type.STRING, 3);
    output.writeString(this.scrollID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ESStructTypeModel = module.exports.ESStructTypeModel = function(args) {
  this.fieldName = null;
  this.fieldType = null;
  this.data = null;
  if (args) {
    if (args.fieldName !== undefined) {
      this.fieldName = args.fieldName;
    }
    if (args.fieldType !== undefined) {
      this.fieldType = args.fieldType;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
ESStructTypeModel.prototype = {};
ESStructTypeModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fieldName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.fieldType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ESStructTypeModel.prototype.write = function(output) {
  output.writeStructBegin('ESStructTypeModel');
  if (this.fieldName !== null && this.fieldName !== undefined) {
    output.writeFieldBegin('fieldName', Thrift.Type.STRING, 1);
    output.writeString(this.fieldName);
    output.writeFieldEnd();
  }
  if (this.fieldType !== null && this.fieldType !== undefined) {
    output.writeFieldBegin('fieldType', Thrift.Type.I32, 2);
    output.writeI32(this.fieldType);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 3);
    output.writeString(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TUpdateModel = module.exports.TUpdateModel = function(args) {
  this.fieldTypeList = null;
  if (args) {
    if (args.fieldTypeList !== undefined) {
      this.fieldTypeList = args.fieldTypeList;
    }
  }
};
TUpdateModel.prototype = {};
TUpdateModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.fieldTypeList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.ESStructTypeModel();
          elem30.read(input);
          this.fieldTypeList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TUpdateModel.prototype.write = function(output) {
  output.writeStructBegin('TUpdateModel');
  if (this.fieldTypeList !== null && this.fieldTypeList !== undefined) {
    output.writeFieldBegin('fieldTypeList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.fieldTypeList.length);
    for (var iter31 in this.fieldTypeList)
    {
      if (this.fieldTypeList.hasOwnProperty(iter31))
      {
        iter31 = this.fieldTypeList[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanResult = module.exports.ScanResult = function(args) {
  this.lines = null;
  this.totalCount = null;
  this.scanCount = null;
  this.scrollID = null;
  if (args) {
    if (args.lines !== undefined) {
      this.lines = args.lines;
    }
    if (args.totalCount !== undefined) {
      this.totalCount = args.totalCount;
    }
    if (args.scanCount !== undefined) {
      this.scanCount = args.scanCount;
    }
    if (args.scrollID !== undefined) {
      this.scrollID = args.scrollID;
    }
  }
};
ScanResult.prototype = {};
ScanResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.lines = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          var _size39 = 0;
          var _rtmp343;
          elem38 = {};
          var _ktype40 = 0;
          var _vtype41 = 0;
          _rtmp343 = input.readMapBegin();
          _ktype40 = _rtmp343.ktype;
          _vtype41 = _rtmp343.vtype;
          _size39 = _rtmp343.size;
          for (var _i44 = 0; _i44 < _size39; ++_i44)
          {
            var key45 = null;
            var val46 = null;
            key45 = input.readString();
            val46 = input.readString();
            elem38[key45] = val46;
          }
          input.readMapEnd();
          this.lines.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.totalCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.scanCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.scrollID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanResult.prototype.write = function(output) {
  output.writeStructBegin('ScanResult');
  if (this.lines !== null && this.lines !== undefined) {
    output.writeFieldBegin('lines', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.MAP, this.lines.length);
    for (var iter47 in this.lines)
    {
      if (this.lines.hasOwnProperty(iter47))
      {
        iter47 = this.lines[iter47];
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(iter47));
        for (var kiter48 in iter47)
        {
          if (iter47.hasOwnProperty(kiter48))
          {
            var viter49 = iter47[kiter48];
            output.writeString(kiter48);
            output.writeString(viter49);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.totalCount !== null && this.totalCount !== undefined) {
    output.writeFieldBegin('totalCount', Thrift.Type.I64, 2);
    output.writeI64(this.totalCount);
    output.writeFieldEnd();
  }
  if (this.scanCount !== null && this.scanCount !== undefined) {
    output.writeFieldBegin('scanCount', Thrift.Type.I64, 3);
    output.writeI64(this.scanCount);
    output.writeFieldEnd();
  }
  if (this.scrollID !== null && this.scrollID !== undefined) {
    output.writeFieldBegin('scrollID', Thrift.Type.STRING, 4);
    output.writeString(this.scrollID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TQueryIndexModel = module.exports.TQueryIndexModel = function(args) {
  this.from = null;
  this.to = null;
  this.userId = null;
  this.database = null;
  this.isProcessTime = false;
  if (args) {
    if (args.from !== undefined) {
      this.from = args.from;
    }
    if (args.to !== undefined) {
      this.to = args.to;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.database !== undefined) {
      this.database = args.database;
    }
    if (args.isProcessTime !== undefined) {
      this.isProcessTime = args.isProcessTime;
    }
  }
};
TQueryIndexModel.prototype = {};
TQueryIndexModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.from = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.to = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.database = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isProcessTime = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TQueryIndexModel.prototype.write = function(output) {
  output.writeStructBegin('TQueryIndexModel');
  if (this.from !== null && this.from !== undefined) {
    output.writeFieldBegin('from', Thrift.Type.I64, 1);
    output.writeI64(this.from);
    output.writeFieldEnd();
  }
  if (this.to !== null && this.to !== undefined) {
    output.writeFieldBegin('to', Thrift.Type.I64, 2);
    output.writeI64(this.to);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 3);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.database !== null && this.database !== undefined) {
    output.writeFieldBegin('database', Thrift.Type.STRING, 4);
    output.writeString(this.database);
    output.writeFieldEnd();
  }
  if (this.isProcessTime !== null && this.isProcessTime !== undefined) {
    output.writeFieldBegin('isProcessTime', Thrift.Type.BOOL, 5);
    output.writeBool(this.isProcessTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TResultModel = module.exports.TResultModel = function(args) {
  this.hits = null;
  this.tooktime = null;
  this.pageSize = null;
  this.pageNum = null;
  this.count = null;
  if (args) {
    if (args.hits !== undefined) {
      this.hits = args.hits;
    }
    if (args.tooktime !== undefined) {
      this.tooktime = args.tooktime;
    }
    if (args.pageSize !== undefined) {
      this.pageSize = args.pageSize;
    }
    if (args.pageNum !== undefined) {
      this.pageNum = args.pageNum;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
TResultModel.prototype = {};
TResultModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size50 = 0;
        var _rtmp354;
        this.hits = [];
        var _etype53 = 0;
        _rtmp354 = input.readListBegin();
        _etype53 = _rtmp354.etype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var elem56 = null;
          elem56 = new ttypes.TRecordModel();
          elem56.read(input);
          this.hits.push(elem56);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tooktime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.pageNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.count = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TResultModel.prototype.write = function(output) {
  output.writeStructBegin('TResultModel');
  if (this.hits !== null && this.hits !== undefined) {
    output.writeFieldBegin('hits', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.hits.length);
    for (var iter57 in this.hits)
    {
      if (this.hits.hasOwnProperty(iter57))
      {
        iter57 = this.hits[iter57];
        iter57.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tooktime !== null && this.tooktime !== undefined) {
    output.writeFieldBegin('tooktime', Thrift.Type.STRING, 2);
    output.writeString(this.tooktime);
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 3);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  if (this.pageNum !== null && this.pageNum !== undefined) {
    output.writeFieldBegin('pageNum', Thrift.Type.I32, 4);
    output.writeI32(this.pageNum);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I64, 5);
    output.writeI64(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRecordModel = module.exports.TRecordModel = function(args) {
  this.type = null;
  this.auxiliaryFields = null;
  this.fields = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.auxiliaryFields !== undefined) {
      this.auxiliaryFields = args.auxiliaryFields;
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    }
  }
};
TRecordModel.prototype = {};
TRecordModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size58 = 0;
        var _rtmp362;
        this.auxiliaryFields = {};
        var _ktype59 = 0;
        var _vtype60 = 0;
        _rtmp362 = input.readMapBegin();
        _ktype59 = _rtmp362.ktype;
        _vtype60 = _rtmp362.vtype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var key64 = null;
          var val65 = null;
          key64 = input.readString();
          val65 = input.readString();
          this.auxiliaryFields[key64] = val65;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size66 = 0;
        var _rtmp370;
        this.fields = {};
        var _ktype67 = 0;
        var _vtype68 = 0;
        _rtmp370 = input.readMapBegin();
        _ktype67 = _rtmp370.ktype;
        _vtype68 = _rtmp370.vtype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          var key72 = null;
          var val73 = null;
          key72 = input.readString();
          val73 = input.readString();
          this.fields[key72] = val73;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRecordModel.prototype.write = function(output) {
  output.writeStructBegin('TRecordModel');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.auxiliaryFields !== null && this.auxiliaryFields !== undefined) {
    output.writeFieldBegin('auxiliaryFields', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.auxiliaryFields));
    for (var kiter74 in this.auxiliaryFields)
    {
      if (this.auxiliaryFields.hasOwnProperty(kiter74))
      {
        var viter75 = this.auxiliaryFields[kiter74];
        output.writeString(kiter74);
        output.writeString(viter75);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.fields));
    for (var kiter76 in this.fields)
    {
      if (this.fields.hasOwnProperty(kiter76))
      {
        var viter77 = this.fields[kiter76];
        output.writeString(kiter76);
        output.writeString(viter77);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TMappingMetaModel = module.exports.TMappingMetaModel = function(args) {
  this.index = null;
  this.type = null;
  this.auxiliaryFields = null;
  this.fields = null;
  if (args) {
    if (args.index !== undefined) {
      this.index = args.index;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.auxiliaryFields !== undefined) {
      this.auxiliaryFields = args.auxiliaryFields;
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    }
  }
};
TMappingMetaModel.prototype = {};
TMappingMetaModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.index = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size78 = 0;
        var _rtmp382;
        this.auxiliaryFields = [];
        var _etype81 = 0;
        _rtmp382 = input.readListBegin();
        _etype81 = _rtmp382.etype;
        _size78 = _rtmp382.size;
        for (var _i83 = 0; _i83 < _size78; ++_i83)
        {
          var elem84 = null;
          elem84 = new ttypes.TFieldAttr();
          elem84.read(input);
          this.auxiliaryFields.push(elem84);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size85 = 0;
        var _rtmp389;
        this.fields = [];
        var _etype88 = 0;
        _rtmp389 = input.readListBegin();
        _etype88 = _rtmp389.etype;
        _size85 = _rtmp389.size;
        for (var _i90 = 0; _i90 < _size85; ++_i90)
        {
          var elem91 = null;
          elem91 = new ttypes.TFieldAttr();
          elem91.read(input);
          this.fields.push(elem91);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMappingMetaModel.prototype.write = function(output) {
  output.writeStructBegin('TMappingMetaModel');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.STRING, 1);
    output.writeString(this.index);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.auxiliaryFields !== null && this.auxiliaryFields !== undefined) {
    output.writeFieldBegin('auxiliaryFields', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.auxiliaryFields.length);
    for (var iter92 in this.auxiliaryFields)
    {
      if (this.auxiliaryFields.hasOwnProperty(iter92))
      {
        iter92 = this.auxiliaryFields[iter92];
        iter92.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.fields.length);
    for (var iter93 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter93))
      {
        iter93 = this.fields[iter93];
        iter93.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TFieldAttr = module.exports.TFieldAttr = function(args) {
  this.name = null;
  this.type = null;
  this.childFieldAttr = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.childFieldAttr !== undefined) {
      this.childFieldAttr = args.childFieldAttr;
    }
  }
};
TFieldAttr.prototype = {};
TFieldAttr.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size94 = 0;
        var _rtmp398;
        this.childFieldAttr = [];
        var _etype97 = 0;
        _rtmp398 = input.readListBegin();
        _etype97 = _rtmp398.etype;
        _size94 = _rtmp398.size;
        for (var _i99 = 0; _i99 < _size94; ++_i99)
        {
          var elem100 = null;
          elem100 = new ttypes.TFieldAttr();
          elem100.read(input);
          this.childFieldAttr.push(elem100);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFieldAttr.prototype.write = function(output) {
  output.writeStructBegin('TFieldAttr');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.childFieldAttr !== null && this.childFieldAttr !== undefined) {
    output.writeFieldBegin('childFieldAttr', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.childFieldAttr.length);
    for (var iter101 in this.childFieldAttr)
    {
      if (this.childFieldAttr.hasOwnProperty(iter101))
      {
        iter101 = this.childFieldAttr[iter101];
        iter101.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TResultTable = module.exports.TResultTable = function(args) {
  this.header = null;
  this.datas = null;
  if (args) {
    if (args.header !== undefined) {
      this.header = args.header;
    }
    if (args.datas !== undefined) {
      this.datas = args.datas;
    }
  }
};
TResultTable.prototype = {};
TResultTable.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size102 = 0;
        var _rtmp3106;
        this.header = [];
        var _etype105 = 0;
        _rtmp3106 = input.readListBegin();
        _etype105 = _rtmp3106.etype;
        _size102 = _rtmp3106.size;
        for (var _i107 = 0; _i107 < _size102; ++_i107)
        {
          var elem108 = null;
          elem108 = input.readString();
          this.header.push(elem108);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size109 = 0;
        var _rtmp3113;
        this.datas = [];
        var _etype112 = 0;
        _rtmp3113 = input.readListBegin();
        _etype112 = _rtmp3113.etype;
        _size109 = _rtmp3113.size;
        for (var _i114 = 0; _i114 < _size109; ++_i114)
        {
          var elem115 = null;
          var _size116 = 0;
          var _rtmp3120;
          elem115 = [];
          var _etype119 = 0;
          _rtmp3120 = input.readListBegin();
          _etype119 = _rtmp3120.etype;
          _size116 = _rtmp3120.size;
          for (var _i121 = 0; _i121 < _size116; ++_i121)
          {
            var elem122 = null;
            elem122 = input.readString();
            elem115.push(elem122);
          }
          input.readListEnd();
          this.datas.push(elem115);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TResultTable.prototype.write = function(output) {
  output.writeStructBegin('TResultTable');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.header.length);
    for (var iter123 in this.header)
    {
      if (this.header.hasOwnProperty(iter123))
      {
        iter123 = this.header[iter123];
        output.writeString(iter123);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.datas !== null && this.datas !== undefined) {
    output.writeFieldBegin('datas', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.datas.length);
    for (var iter124 in this.datas)
    {
      if (this.datas.hasOwnProperty(iter124))
      {
        iter124 = this.datas[iter124];
        output.writeListBegin(Thrift.Type.STRING, iter124.length);
        for (var iter125 in iter124)
        {
          if (iter124.hasOwnProperty(iter125))
          {
            iter125 = iter124[iter125];
            output.writeString(iter125);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FieldStatResult = module.exports.FieldStatResult = function(args) {
  this.field = null;
  this.count = null;
  this.avg = null;
  this.max = null;
  this.min = null;
  this.sum = null;
  this.dcount = null;
  this.terms = null;
  this.stat = true;
  if (args) {
    if (args.field !== undefined) {
      this.field = args.field;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
    if (args.avg !== undefined) {
      this.avg = args.avg;
    }
    if (args.max !== undefined) {
      this.max = args.max;
    }
    if (args.min !== undefined) {
      this.min = args.min;
    }
    if (args.sum !== undefined) {
      this.sum = args.sum;
    }
    if (args.dcount !== undefined) {
      this.dcount = args.dcount;
    }
    if (args.terms !== undefined) {
      this.terms = args.terms;
    }
    if (args.stat !== undefined) {
      this.stat = args.stat;
    }
  }
};
FieldStatResult.prototype = {};
FieldStatResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.field = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.count = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.avg = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.max = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.min = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.sum = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.dcount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size126 = 0;
        var _rtmp3130;
        this.terms = {};
        var _ktype127 = 0;
        var _vtype128 = 0;
        _rtmp3130 = input.readMapBegin();
        _ktype127 = _rtmp3130.ktype;
        _vtype128 = _rtmp3130.vtype;
        _size126 = _rtmp3130.size;
        for (var _i131 = 0; _i131 < _size126; ++_i131)
        {
          var key132 = null;
          var val133 = null;
          key132 = input.readString();
          val133 = input.readI64();
          this.terms[key132] = val133;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.stat = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FieldStatResult.prototype.write = function(output) {
  output.writeStructBegin('FieldStatResult');
  if (this.field !== null && this.field !== undefined) {
    output.writeFieldBegin('field', Thrift.Type.STRING, 1);
    output.writeString(this.field);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I64, 2);
    output.writeI64(this.count);
    output.writeFieldEnd();
  }
  if (this.avg !== null && this.avg !== undefined) {
    output.writeFieldBegin('avg', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.avg);
    output.writeFieldEnd();
  }
  if (this.max !== null && this.max !== undefined) {
    output.writeFieldBegin('max', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.max);
    output.writeFieldEnd();
  }
  if (this.min !== null && this.min !== undefined) {
    output.writeFieldBegin('min', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.min);
    output.writeFieldEnd();
  }
  if (this.sum !== null && this.sum !== undefined) {
    output.writeFieldBegin('sum', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.sum);
    output.writeFieldEnd();
  }
  if (this.dcount !== null && this.dcount !== undefined) {
    output.writeFieldBegin('dcount', Thrift.Type.I64, 7);
    output.writeI64(this.dcount);
    output.writeFieldEnd();
  }
  if (this.terms !== null && this.terms !== undefined) {
    output.writeFieldBegin('terms', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.terms));
    for (var kiter134 in this.terms)
    {
      if (this.terms.hasOwnProperty(kiter134))
      {
        var viter135 = this.terms[kiter134];
        output.writeString(kiter134);
        output.writeI64(viter135);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.stat !== null && this.stat !== undefined) {
    output.writeFieldBegin('stat', Thrift.Type.BOOL, 9);
    output.writeBool(this.stat);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DELResult = module.exports.DELResult = function(args) {
  this.deleted = null;
  this.failed = null;
  this.found = null;
  this.missing = null;
  if (args) {
    if (args.deleted !== undefined) {
      this.deleted = args.deleted;
    }
    if (args.failed !== undefined) {
      this.failed = args.failed;
    }
    if (args.found !== undefined) {
      this.found = args.found;
    }
    if (args.missing !== undefined) {
      this.missing = args.missing;
    }
  }
};
DELResult.prototype = {};
DELResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.failed = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.found = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.missing = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DELResult.prototype.write = function(output) {
  output.writeStructBegin('DELResult');
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 1);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.failed !== null && this.failed !== undefined) {
    output.writeFieldBegin('failed', Thrift.Type.I64, 2);
    output.writeI64(this.failed);
    output.writeFieldEnd();
  }
  if (this.found !== null && this.found !== undefined) {
    output.writeFieldBegin('found', Thrift.Type.I64, 3);
    output.writeI64(this.found);
    output.writeFieldEnd();
  }
  if (this.missing !== null && this.missing !== undefined) {
    output.writeFieldBegin('missing', Thrift.Type.I64, 4);
    output.writeI64(this.missing);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateResult = module.exports.UpdateResult = function(args) {
  this.batches = null;
  this.searchFailures = null;
  this.noops = null;
  this.tookTime = null;
  this.updated = null;
  this.versionConflicts = null;
  this.indexingFailures = null;
  if (args) {
    if (args.batches !== undefined) {
      this.batches = args.batches;
    }
    if (args.searchFailures !== undefined) {
      this.searchFailures = args.searchFailures;
    }
    if (args.noops !== undefined) {
      this.noops = args.noops;
    }
    if (args.tookTime !== undefined) {
      this.tookTime = args.tookTime;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.versionConflicts !== undefined) {
      this.versionConflicts = args.versionConflicts;
    }
    if (args.indexingFailures !== undefined) {
      this.indexingFailures = args.indexingFailures;
    }
  }
};
UpdateResult.prototype = {};
UpdateResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.batches = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.searchFailures = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.noops = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.tookTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.versionConflicts = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.indexingFailures = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateResult.prototype.write = function(output) {
  output.writeStructBegin('UpdateResult');
  if (this.batches !== null && this.batches !== undefined) {
    output.writeFieldBegin('batches', Thrift.Type.I64, 1);
    output.writeI64(this.batches);
    output.writeFieldEnd();
  }
  if (this.searchFailures !== null && this.searchFailures !== undefined) {
    output.writeFieldBegin('searchFailures', Thrift.Type.I64, 2);
    output.writeI64(this.searchFailures);
    output.writeFieldEnd();
  }
  if (this.noops !== null && this.noops !== undefined) {
    output.writeFieldBegin('noops', Thrift.Type.I64, 3);
    output.writeI64(this.noops);
    output.writeFieldEnd();
  }
  if (this.tookTime !== null && this.tookTime !== undefined) {
    output.writeFieldBegin('tookTime', Thrift.Type.I64, 4);
    output.writeI64(this.tookTime);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 5);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.versionConflicts !== null && this.versionConflicts !== undefined) {
    output.writeFieldBegin('versionConflicts', Thrift.Type.I64, 6);
    output.writeI64(this.versionConflicts);
    output.writeFieldEnd();
  }
  if (this.indexingFailures !== null && this.indexingFailures !== undefined) {
    output.writeFieldBegin('indexingFailures', Thrift.Type.I64, 7);
    output.writeI64(this.indexingFailures);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCSVResult = module.exports.TCSVResult = function(args) {
  this.headers = null;
  this.lines = null;
  if (args) {
    if (args.headers !== undefined) {
      this.headers = args.headers;
    }
    if (args.lines !== undefined) {
      this.lines = args.lines;
    }
  }
};
TCSVResult.prototype = {};
TCSVResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.headers = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = input.readString();
          this.headers.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size143 = 0;
        var _rtmp3147;
        this.lines = [];
        var _etype146 = 0;
        _rtmp3147 = input.readListBegin();
        _etype146 = _rtmp3147.etype;
        _size143 = _rtmp3147.size;
        for (var _i148 = 0; _i148 < _size143; ++_i148)
        {
          var elem149 = null;
          elem149 = input.readString();
          this.lines.push(elem149);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCSVResult.prototype.write = function(output) {
  output.writeStructBegin('TCSVResult');
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.headers.length);
    for (var iter150 in this.headers)
    {
      if (this.headers.hasOwnProperty(iter150))
      {
        iter150 = this.headers[iter150];
        output.writeString(iter150);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lines !== null && this.lines !== undefined) {
    output.writeFieldBegin('lines', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.lines.length);
    for (var iter151 in this.lines)
    {
      if (this.lines.hasOwnProperty(iter151))
      {
        iter151 = this.lines[iter151];
        output.writeString(iter151);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CSVParameter = module.exports.CSVParameter = function(args) {
  this.flat = true;
  this.separator = ',';
  if (args) {
    if (args.flat !== undefined) {
      this.flat = args.flat;
    }
    if (args.separator !== undefined) {
      this.separator = args.separator;
    }
  }
};
CSVParameter.prototype = {};
CSVParameter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.flat = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.separator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSVParameter.prototype.write = function(output) {
  output.writeStructBegin('CSVParameter');
  if (this.flat !== null && this.flat !== undefined) {
    output.writeFieldBegin('flat', Thrift.Type.BOOL, 1);
    output.writeBool(this.flat);
    output.writeFieldEnd();
  }
  if (this.separator !== null && this.separator !== undefined) {
    output.writeFieldBegin('separator', Thrift.Type.STRING, 2);
    output.writeString(this.separator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

