//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
RDictTableModelTO = module.exports.RDictTableModelTO = function(args) {
  this.id = null;
  this.creatTime = null;
  this.modifyTime = null;
  this.status = null;
  this.remark = null;
  this.dtName = null;
  this.dtAlias = null;
  this.key = null;
  this.isWStart = true;
  this.values = null;
  this.fields = null;
  this.totalPage = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.creatTime !== undefined && args.creatTime !== null) {
      this.creatTime = args.creatTime;
    }
    if (args.modifyTime !== undefined && args.modifyTime !== null) {
      this.modifyTime = args.modifyTime;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.remark !== undefined && args.remark !== null) {
      this.remark = args.remark;
    }
    if (args.dtName !== undefined && args.dtName !== null) {
      this.dtName = args.dtName;
    }
    if (args.dtAlias !== undefined && args.dtAlias !== null) {
      this.dtAlias = args.dtAlias;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.isWStart !== undefined && args.isWStart !== null) {
      this.isWStart = args.isWStart;
    }
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [Thrift.copyList, null]);
    }
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = Thrift.copyList(args.fields, [null]);
    }
    if (args.totalPage !== undefined && args.totalPage !== null) {
      this.totalPage = args.totalPage;
    }
  }
};
RDictTableModelTO.prototype = {};
RDictTableModelTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.creatTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.modifyTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.status = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.remark = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.dtName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.dtAlias = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.isWStart = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.values = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          var _size7 = 0;
          var _rtmp311;
          elem6 = [];
          var _etype10 = 0;
          _rtmp311 = input.readListBegin();
          _etype10 = _rtmp311.etype;
          _size7 = _rtmp311.size;
          for (var _i12 = 0; _i12 < _size7; ++_i12)
          {
            var elem13 = null;
            elem13 = input.readString();
            elem6.push(elem13);
          }
          input.readListEnd();
          this.values.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.fields = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = new ttypes.RDictFieldEntityTO();
          elem20.read(input);
          this.fields.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.totalPage = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RDictTableModelTO.prototype.write = function(output) {
  output.writeStructBegin('RDictTableModelTO');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.creatTime !== null && this.creatTime !== undefined) {
    output.writeFieldBegin('creatTime', Thrift.Type.I64, 2);
    output.writeI64(this.creatTime);
    output.writeFieldEnd();
  }
  if (this.modifyTime !== null && this.modifyTime !== undefined) {
    output.writeFieldBegin('modifyTime', Thrift.Type.I64, 3);
    output.writeI64(this.modifyTime);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I16, 4);
    output.writeI16(this.status);
    output.writeFieldEnd();
  }
  if (this.remark !== null && this.remark !== undefined) {
    output.writeFieldBegin('remark', Thrift.Type.STRING, 5);
    output.writeString(this.remark);
    output.writeFieldEnd();
  }
  if (this.dtName !== null && this.dtName !== undefined) {
    output.writeFieldBegin('dtName', Thrift.Type.STRING, 6);
    output.writeString(this.dtName);
    output.writeFieldEnd();
  }
  if (this.dtAlias !== null && this.dtAlias !== undefined) {
    output.writeFieldBegin('dtAlias', Thrift.Type.STRING, 7);
    output.writeString(this.dtAlias);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 8);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.isWStart !== null && this.isWStart !== undefined) {
    output.writeFieldBegin('isWStart', Thrift.Type.BOOL, 9);
    output.writeBool(this.isWStart);
    output.writeFieldEnd();
  }
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.LIST, this.values.length);
    for (var iter21 in this.values)
    {
      if (this.values.hasOwnProperty(iter21))
      {
        iter21 = this.values[iter21];
        output.writeListBegin(Thrift.Type.STRING, iter21.length);
        for (var iter22 in iter21)
        {
          if (iter21.hasOwnProperty(iter22))
          {
            iter22 = iter21[iter22];
            output.writeString(iter22);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.fields.length);
    for (var iter23 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter23))
      {
        iter23 = this.fields[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.totalPage !== null && this.totalPage !== undefined) {
    output.writeFieldBegin('totalPage', Thrift.Type.I64, 12);
    output.writeI64(this.totalPage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RDictFieldEntityTO = module.exports.RDictFieldEntityTO = function(args) {
  this.id = null;
  this.dtId = null;
  this.fieldName = null;
  this.fieldType = null;
  this.isKey = null;
  this.status = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.dtId !== undefined && args.dtId !== null) {
      this.dtId = args.dtId;
    }
    if (args.fieldName !== undefined && args.fieldName !== null) {
      this.fieldName = args.fieldName;
    }
    if (args.fieldType !== undefined && args.fieldType !== null) {
      this.fieldType = args.fieldType;
    }
    if (args.isKey !== undefined && args.isKey !== null) {
      this.isKey = args.isKey;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
RDictFieldEntityTO.prototype = {};
RDictFieldEntityTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dtId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fieldName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.fieldType = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.isKey = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I16) {
        this.status = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RDictFieldEntityTO.prototype.write = function(output) {
  output.writeStructBegin('RDictFieldEntityTO');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.dtId !== null && this.dtId !== undefined) {
    output.writeFieldBegin('dtId', Thrift.Type.I32, 2);
    output.writeI32(this.dtId);
    output.writeFieldEnd();
  }
  if (this.fieldName !== null && this.fieldName !== undefined) {
    output.writeFieldBegin('fieldName', Thrift.Type.STRING, 3);
    output.writeString(this.fieldName);
    output.writeFieldEnd();
  }
  if (this.fieldType !== null && this.fieldType !== undefined) {
    output.writeFieldBegin('fieldType', Thrift.Type.I16, 4);
    output.writeI16(this.fieldType);
    output.writeFieldEnd();
  }
  if (this.isKey !== null && this.isKey !== undefined) {
    output.writeFieldBegin('isKey', Thrift.Type.I16, 5);
    output.writeI16(this.isKey);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I16, 6);
    output.writeI16(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

