//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
Rule = module.exports.Rule = function(args) {
  this.number = null;
  this.country = null;
  this.position = null;
  this.address = null;
  if (args) {
    if (args.number !== undefined) {
      this.number = args.number;
    }
    if (args.country !== undefined) {
      this.country = args.country;
    }
    if (args.position !== undefined) {
      this.position = args.position;
    }
    if (args.address !== undefined) {
      this.address = args.address;
    }
  }
};
Rule.prototype = {};
Rule.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.number = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.position = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Rule.prototype.write = function(output) {
  output.writeStructBegin('Rule');
  if (this.number !== null && this.number !== undefined) {
    output.writeFieldBegin('number', Thrift.Type.I32, 1);
    output.writeI32(this.number);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 2);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.STRING, 3);
    output.writeString(this.position);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 4);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Person = module.exports.Person = function(args) {
  this.name = null;
  this.age = null;
  this.chengren = null;
  this.sex = null;
  this.price = null;
  this.remarks = null;
  this.rules = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.age !== undefined) {
      this.age = args.age;
    }
    if (args.chengren !== undefined) {
      this.chengren = args.chengren;
    }
    if (args.sex !== undefined) {
      this.sex = args.sex;
    }
    if (args.price !== undefined) {
      this.price = args.price;
    }
    if (args.remarks !== undefined) {
      this.remarks = args.remarks;
    }
    if (args.rules !== undefined) {
      this.rules = args.rules;
    }
  }
};
Person.prototype = {};
Person.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.age = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.chengren = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this.sex = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.remarks = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.rules = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Rule();
          elem6.read(input);
          this.rules.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Person.prototype.write = function(output) {
  output.writeStructBegin('Person');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.age !== null && this.age !== undefined) {
    output.writeFieldBegin('age', Thrift.Type.I32, 2);
    output.writeI32(this.age);
    output.writeFieldEnd();
  }
  if (this.chengren !== null && this.chengren !== undefined) {
    output.writeFieldBegin('chengren', Thrift.Type.BOOL, 3);
    output.writeBool(this.chengren);
    output.writeFieldEnd();
  }
  if (this.sex !== null && this.sex !== undefined) {
    output.writeFieldBegin('sex', Thrift.Type.BYTE, 4);
    output.writeByte(this.sex);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  if (this.remarks !== null && this.remarks !== undefined) {
    output.writeFieldBegin('remarks', Thrift.Type.STRING, 6);
    output.writeString(this.remarks);
    output.writeFieldEnd();
  }
  if (this.rules !== null && this.rules !== undefined) {
    output.writeFieldBegin('rules', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.rules.length);
    for (var iter7 in this.rules)
    {
      if (this.rules.hasOwnProperty(iter7))
      {
        iter7 = this.rules[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

