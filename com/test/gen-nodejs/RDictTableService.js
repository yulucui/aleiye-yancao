//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Exception_ttypes = require('./Exception_types')
var DictEntity_ttypes = require('./DictEntity_types')


var ttypes = require('./DictService_types');
//HELPER FUNCTIONS AND STRUCTURES

RDictTableService_insertDict_args = function(args) {
  this.dictModel = null;
  if (args) {
    if (args.dictModel !== undefined && args.dictModel !== null) {
      this.dictModel = new DictEntity_ttypes.RDictTableModelTO(args.dictModel);
    }
  }
};
RDictTableService_insertDict_args.prototype = {};
RDictTableService_insertDict_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.dictModel = new DictEntity_ttypes.RDictTableModelTO();
        this.dictModel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RDictTableService_insertDict_args.prototype.write = function(output) {
  output.writeStructBegin('RDictTableService_insertDict_args');
  if (this.dictModel !== null && this.dictModel !== undefined) {
    output.writeFieldBegin('dictModel', Thrift.Type.STRUCT, 1);
    this.dictModel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RDictTableService_insertDict_result = function(args) {
  this.success = null;
  this.e = null;
  this.rne = null;
  if (args instanceof Exception_ttypes.RException) {
    this.e = args;
    return;
  }
  if (args instanceof Exception_ttypes.RReturnNullException) {
    this.rne = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.rne !== undefined && args.rne !== null) {
      this.rne = args.rne;
    }
  }
};
RDictTableService_insertDict_result.prototype = {};
RDictTableService_insertDict_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Exception_ttypes.RException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rne = new Exception_ttypes.RReturnNullException();
        this.rne.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RDictTableService_insertDict_result.prototype.write = function(output) {
  output.writeStructBegin('RDictTableService_insertDict_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.rne !== null && this.rne !== undefined) {
    output.writeFieldBegin('rne', Thrift.Type.STRUCT, 2);
    this.rne.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RDictTableService_delDict_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
RDictTableService_delDict_args.prototype = {};
RDictTableService_delDict_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RDictTableService_delDict_args.prototype.write = function(output) {
  output.writeStructBegin('RDictTableService_delDict_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RDictTableService_delDict_result = function(args) {
  this.success = null;
  this.e = null;
  this.rne = null;
  if (args instanceof Exception_ttypes.RException) {
    this.e = args;
    return;
  }
  if (args instanceof Exception_ttypes.RReturnNullException) {
    this.rne = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.rne !== undefined && args.rne !== null) {
      this.rne = args.rne;
    }
  }
};
RDictTableService_delDict_result.prototype = {};
RDictTableService_delDict_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Exception_ttypes.RException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rne = new Exception_ttypes.RReturnNullException();
        this.rne.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RDictTableService_delDict_result.prototype.write = function(output) {
  output.writeStructBegin('RDictTableService_delDict_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.rne !== null && this.rne !== undefined) {
    output.writeFieldBegin('rne', Thrift.Type.STRUCT, 2);
    this.rne.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RDictTableService_delRow_args = function(args) {
  this.id = null;
  this.keyVal = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.keyVal !== undefined && args.keyVal !== null) {
      this.keyVal = Thrift.copyMap(args.keyVal, [null]);
    }
  }
};
RDictTableService_delRow_args.prototype = {};
RDictTableService_delRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.keyVal = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.keyVal[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RDictTableService_delRow_args.prototype.write = function(output) {
  output.writeStructBegin('RDictTableService_delRow_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.keyVal !== null && this.keyVal !== undefined) {
    output.writeFieldBegin('keyVal', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.keyVal));
    for (var kiter8 in this.keyVal)
    {
      if (this.keyVal.hasOwnProperty(kiter8))
      {
        var viter9 = this.keyVal[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RDictTableService_delRow_result = function(args) {
  this.success = null;
  this.e = null;
  this.rne = null;
  if (args instanceof Exception_ttypes.RException) {
    this.e = args;
    return;
  }
  if (args instanceof Exception_ttypes.RReturnNullException) {
    this.rne = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.rne !== undefined && args.rne !== null) {
      this.rne = args.rne;
    }
  }
};
RDictTableService_delRow_result.prototype = {};
RDictTableService_delRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Exception_ttypes.RException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rne = new Exception_ttypes.RReturnNullException();
        this.rne.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RDictTableService_delRow_result.prototype.write = function(output) {
  output.writeStructBegin('RDictTableService_delRow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.rne !== null && this.rne !== undefined) {
    output.writeFieldBegin('rne', Thrift.Type.STRUCT, 2);
    this.rne.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RDictTableService_updateDict_args = function(args) {
  this.dictModel = null;
  if (args) {
    if (args.dictModel !== undefined && args.dictModel !== null) {
      this.dictModel = new DictEntity_ttypes.RDictTableModelTO(args.dictModel);
    }
  }
};
RDictTableService_updateDict_args.prototype = {};
RDictTableService_updateDict_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.dictModel = new DictEntity_ttypes.RDictTableModelTO();
        this.dictModel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RDictTableService_updateDict_args.prototype.write = function(output) {
  output.writeStructBegin('RDictTableService_updateDict_args');
  if (this.dictModel !== null && this.dictModel !== undefined) {
    output.writeFieldBegin('dictModel', Thrift.Type.STRUCT, 1);
    this.dictModel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RDictTableService_updateDict_result = function(args) {
  this.success = null;
  this.e = null;
  this.rne = null;
  if (args instanceof Exception_ttypes.RException) {
    this.e = args;
    return;
  }
  if (args instanceof Exception_ttypes.RReturnNullException) {
    this.rne = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.rne !== undefined && args.rne !== null) {
      this.rne = args.rne;
    }
  }
};
RDictTableService_updateDict_result.prototype = {};
RDictTableService_updateDict_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Exception_ttypes.RException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rne = new Exception_ttypes.RReturnNullException();
        this.rne.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RDictTableService_updateDict_result.prototype.write = function(output) {
  output.writeStructBegin('RDictTableService_updateDict_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.rne !== null && this.rne !== undefined) {
    output.writeFieldBegin('rne', Thrift.Type.STRUCT, 2);
    this.rne.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RDictTableService_getPDictById_args = function(args) {
  this.id = null;
  this.pStart = null;
  this.limit = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.pStart !== undefined && args.pStart !== null) {
      this.pStart = args.pStart;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
RDictTableService_getPDictById_args.prototype = {};
RDictTableService_getPDictById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pStart = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RDictTableService_getPDictById_args.prototype.write = function(output) {
  output.writeStructBegin('RDictTableService_getPDictById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.pStart !== null && this.pStart !== undefined) {
    output.writeFieldBegin('pStart', Thrift.Type.I32, 2);
    output.writeI32(this.pStart);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 3);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RDictTableService_getPDictById_result = function(args) {
  this.success = null;
  this.e = null;
  this.rne = null;
  if (args instanceof Exception_ttypes.RException) {
    this.e = args;
    return;
  }
  if (args instanceof Exception_ttypes.RReturnNullException) {
    this.rne = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DictEntity_ttypes.RDictTableModelTO(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.rne !== undefined && args.rne !== null) {
      this.rne = args.rne;
    }
  }
};
RDictTableService_getPDictById_result.prototype = {};
RDictTableService_getPDictById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DictEntity_ttypes.RDictTableModelTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Exception_ttypes.RException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rne = new Exception_ttypes.RReturnNullException();
        this.rne.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RDictTableService_getPDictById_result.prototype.write = function(output) {
  output.writeStructBegin('RDictTableService_getPDictById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.rne !== null && this.rne !== undefined) {
    output.writeFieldBegin('rne', Thrift.Type.STRUCT, 2);
    this.rne.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RDictTableService_getDictById_args = function(args) {
  this.id = null;
  this.includeAll = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.includeAll !== undefined && args.includeAll !== null) {
      this.includeAll = args.includeAll;
    }
  }
};
RDictTableService_getDictById_args.prototype = {};
RDictTableService_getDictById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.includeAll = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RDictTableService_getDictById_args.prototype.write = function(output) {
  output.writeStructBegin('RDictTableService_getDictById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.includeAll !== null && this.includeAll !== undefined) {
    output.writeFieldBegin('includeAll', Thrift.Type.BOOL, 2);
    output.writeBool(this.includeAll);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RDictTableService_getDictById_result = function(args) {
  this.success = null;
  this.e = null;
  this.rne = null;
  if (args instanceof Exception_ttypes.RException) {
    this.e = args;
    return;
  }
  if (args instanceof Exception_ttypes.RReturnNullException) {
    this.rne = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DictEntity_ttypes.RDictTableModelTO(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.rne !== undefined && args.rne !== null) {
      this.rne = args.rne;
    }
  }
};
RDictTableService_getDictById_result.prototype = {};
RDictTableService_getDictById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DictEntity_ttypes.RDictTableModelTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Exception_ttypes.RException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rne = new Exception_ttypes.RReturnNullException();
        this.rne.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RDictTableService_getDictById_result.prototype.write = function(output) {
  output.writeStructBegin('RDictTableService_getDictById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.rne !== null && this.rne !== undefined) {
    output.writeFieldBegin('rne', Thrift.Type.STRUCT, 2);
    this.rne.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RDictTableService_getAllDict_args = function(args) {
};
RDictTableService_getAllDict_args.prototype = {};
RDictTableService_getAllDict_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RDictTableService_getAllDict_args.prototype.write = function(output) {
  output.writeStructBegin('RDictTableService_getAllDict_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RDictTableService_getAllDict_result = function(args) {
  this.success = null;
  this.e = null;
  this.rne = null;
  if (args instanceof Exception_ttypes.RException) {
    this.e = args;
    return;
  }
  if (args instanceof Exception_ttypes.RReturnNullException) {
    this.rne = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DictEntity_ttypes.RDictTableModelTO]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.rne !== undefined && args.rne !== null) {
      this.rne = args.rne;
    }
  }
};
RDictTableService_getAllDict_result.prototype = {};
RDictTableService_getAllDict_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.success = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = new DictEntity_ttypes.RDictTableModelTO();
          elem16.read(input);
          this.success.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Exception_ttypes.RException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rne = new Exception_ttypes.RReturnNullException();
        this.rne.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RDictTableService_getAllDict_result.prototype.write = function(output) {
  output.writeStructBegin('RDictTableService_getAllDict_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter17 in this.success)
    {
      if (this.success.hasOwnProperty(iter17))
      {
        iter17 = this.success[iter17];
        iter17.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.rne !== null && this.rne !== undefined) {
    output.writeFieldBegin('rne', Thrift.Type.STRUCT, 2);
    this.rne.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RDictTableService_queryDictOfFuzzy_args = function(args) {
  this.id = null;
  this.keyVal = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.keyVal !== undefined && args.keyVal !== null) {
      this.keyVal = Thrift.copyMap(args.keyVal, [null]);
    }
  }
};
RDictTableService_queryDictOfFuzzy_args.prototype = {};
RDictTableService_queryDictOfFuzzy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size18 = 0;
        var _rtmp322;
        this.keyVal = {};
        var _ktype19 = 0;
        var _vtype20 = 0;
        _rtmp322 = input.readMapBegin();
        _ktype19 = _rtmp322.ktype;
        _vtype20 = _rtmp322.vtype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var key24 = null;
          var val25 = null;
          key24 = input.readString();
          val25 = input.readString();
          this.keyVal[key24] = val25;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RDictTableService_queryDictOfFuzzy_args.prototype.write = function(output) {
  output.writeStructBegin('RDictTableService_queryDictOfFuzzy_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.keyVal !== null && this.keyVal !== undefined) {
    output.writeFieldBegin('keyVal', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.keyVal));
    for (var kiter26 in this.keyVal)
    {
      if (this.keyVal.hasOwnProperty(kiter26))
      {
        var viter27 = this.keyVal[kiter26];
        output.writeString(kiter26);
        output.writeString(viter27);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RDictTableService_queryDictOfFuzzy_result = function(args) {
  this.success = null;
  this.e = null;
  this.rne = null;
  if (args instanceof Exception_ttypes.RException) {
    this.e = args;
    return;
  }
  if (args instanceof Exception_ttypes.RReturnNullException) {
    this.rne = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DictEntity_ttypes.RDictTableModelTO(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.rne !== undefined && args.rne !== null) {
      this.rne = args.rne;
    }
  }
};
RDictTableService_queryDictOfFuzzy_result.prototype = {};
RDictTableService_queryDictOfFuzzy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DictEntity_ttypes.RDictTableModelTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Exception_ttypes.RException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rne = new Exception_ttypes.RReturnNullException();
        this.rne.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RDictTableService_queryDictOfFuzzy_result.prototype.write = function(output) {
  output.writeStructBegin('RDictTableService_queryDictOfFuzzy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.rne !== null && this.rne !== undefined) {
    output.writeFieldBegin('rne', Thrift.Type.STRUCT, 2);
    this.rne.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RDictTableServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
RDictTableServiceClient.prototype = {};
RDictTableServiceClient.prototype.seqid = function() { return this._seqid; }
RDictTableServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
RDictTableServiceClient.prototype.insertDict = function(dictModel, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_insertDict(dictModel);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_insertDict(dictModel);
  }
};

RDictTableServiceClient.prototype.send_insertDict = function(dictModel) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('insertDict', Thrift.MessageType.CALL, this.seqid());
  var args = new RDictTableService_insertDict_args();
  args.dictModel = dictModel;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RDictTableServiceClient.prototype.recv_insertDict = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RDictTableService_insertDict_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.rne) {
    return callback(result.rne);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('insertDict failed: unknown result');
};
RDictTableServiceClient.prototype.delDict = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delDict(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delDict(id);
  }
};

RDictTableServiceClient.prototype.send_delDict = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delDict', Thrift.MessageType.CALL, this.seqid());
  var args = new RDictTableService_delDict_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RDictTableServiceClient.prototype.recv_delDict = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RDictTableService_delDict_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.rne) {
    return callback(result.rne);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('delDict failed: unknown result');
};
RDictTableServiceClient.prototype.delRow = function(id, keyVal, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delRow(id, keyVal);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delRow(id, keyVal);
  }
};

RDictTableServiceClient.prototype.send_delRow = function(id, keyVal) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delRow', Thrift.MessageType.CALL, this.seqid());
  var args = new RDictTableService_delRow_args();
  args.id = id;
  args.keyVal = keyVal;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RDictTableServiceClient.prototype.recv_delRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RDictTableService_delRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.rne) {
    return callback(result.rne);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('delRow failed: unknown result');
};
RDictTableServiceClient.prototype.updateDict = function(dictModel, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateDict(dictModel);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateDict(dictModel);
  }
};

RDictTableServiceClient.prototype.send_updateDict = function(dictModel) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateDict', Thrift.MessageType.CALL, this.seqid());
  var args = new RDictTableService_updateDict_args();
  args.dictModel = dictModel;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RDictTableServiceClient.prototype.recv_updateDict = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RDictTableService_updateDict_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.rne) {
    return callback(result.rne);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateDict failed: unknown result');
};
RDictTableServiceClient.prototype.getPDictById = function(id, pStart, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPDictById(id, pStart, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPDictById(id, pStart, limit);
  }
};

RDictTableServiceClient.prototype.send_getPDictById = function(id, pStart, limit) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPDictById', Thrift.MessageType.CALL, this.seqid());
  var args = new RDictTableService_getPDictById_args();
  args.id = id;
  args.pStart = pStart;
  args.limit = limit;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RDictTableServiceClient.prototype.recv_getPDictById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RDictTableService_getPDictById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.rne) {
    return callback(result.rne);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPDictById failed: unknown result');
};
RDictTableServiceClient.prototype.getDictById = function(id, includeAll, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDictById(id, includeAll);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDictById(id, includeAll);
  }
};

RDictTableServiceClient.prototype.send_getDictById = function(id, includeAll) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDictById', Thrift.MessageType.CALL, this.seqid());
  var args = new RDictTableService_getDictById_args();
  args.id = id;
  args.includeAll = includeAll;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RDictTableServiceClient.prototype.recv_getDictById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RDictTableService_getDictById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.rne) {
    return callback(result.rne);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDictById failed: unknown result');
};
RDictTableServiceClient.prototype.getAllDict = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllDict();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllDict();
  }
};

RDictTableServiceClient.prototype.send_getAllDict = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllDict', Thrift.MessageType.CALL, this.seqid());
  var args = new RDictTableService_getAllDict_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RDictTableServiceClient.prototype.recv_getAllDict = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RDictTableService_getAllDict_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.rne) {
    return callback(result.rne);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllDict failed: unknown result');
};
RDictTableServiceClient.prototype.queryDictOfFuzzy = function(id, keyVal, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryDictOfFuzzy(id, keyVal);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryDictOfFuzzy(id, keyVal);
  }
};

RDictTableServiceClient.prototype.send_queryDictOfFuzzy = function(id, keyVal) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryDictOfFuzzy', Thrift.MessageType.CALL, this.seqid());
  var args = new RDictTableService_queryDictOfFuzzy_args();
  args.id = id;
  args.keyVal = keyVal;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RDictTableServiceClient.prototype.recv_queryDictOfFuzzy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RDictTableService_queryDictOfFuzzy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.rne) {
    return callback(result.rne);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryDictOfFuzzy failed: unknown result');
};
RDictTableServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
RDictTableServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

RDictTableServiceProcessor.prototype.process_insertDict = function(seqid, input, output) {
  var args = new RDictTableService_insertDict_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.insertDict.length === 1) {
    Q.fcall(this._handler.insertDict, args.dictModel)
      .then(function(result) {
        var result = new RDictTableService_insertDict_result({success: result});
        output.writeMessageBegin("insertDict", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException || err instanceof Exception_ttypes.RReturnNullException) {
          var result = new RDictTableService_insertDict_result(err);
          output.writeMessageBegin("insertDict", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("insertDict", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.insertDict(args.dictModel, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException || err instanceof Exception_ttypes.RReturnNullException) {
        var result = new RDictTableService_insertDict_result((err != null ? err : {success: result}));
        output.writeMessageBegin("insertDict", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("insertDict", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

RDictTableServiceProcessor.prototype.process_delDict = function(seqid, input, output) {
  var args = new RDictTableService_delDict_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delDict.length === 1) {
    Q.fcall(this._handler.delDict, args.id)
      .then(function(result) {
        var result = new RDictTableService_delDict_result({success: result});
        output.writeMessageBegin("delDict", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException || err instanceof Exception_ttypes.RReturnNullException) {
          var result = new RDictTableService_delDict_result(err);
          output.writeMessageBegin("delDict", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("delDict", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.delDict(args.id, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException || err instanceof Exception_ttypes.RReturnNullException) {
        var result = new RDictTableService_delDict_result((err != null ? err : {success: result}));
        output.writeMessageBegin("delDict", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delDict", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

RDictTableServiceProcessor.prototype.process_delRow = function(seqid, input, output) {
  var args = new RDictTableService_delRow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delRow.length === 2) {
    Q.fcall(this._handler.delRow, args.id, args.keyVal)
      .then(function(result) {
        var result = new RDictTableService_delRow_result({success: result});
        output.writeMessageBegin("delRow", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException || err instanceof Exception_ttypes.RReturnNullException) {
          var result = new RDictTableService_delRow_result(err);
          output.writeMessageBegin("delRow", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("delRow", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.delRow(args.id, args.keyVal, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException || err instanceof Exception_ttypes.RReturnNullException) {
        var result = new RDictTableService_delRow_result((err != null ? err : {success: result}));
        output.writeMessageBegin("delRow", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delRow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

RDictTableServiceProcessor.prototype.process_updateDict = function(seqid, input, output) {
  var args = new RDictTableService_updateDict_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateDict.length === 1) {
    Q.fcall(this._handler.updateDict, args.dictModel)
      .then(function(result) {
        var result = new RDictTableService_updateDict_result({success: result});
        output.writeMessageBegin("updateDict", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException || err instanceof Exception_ttypes.RReturnNullException) {
          var result = new RDictTableService_updateDict_result(err);
          output.writeMessageBegin("updateDict", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateDict", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateDict(args.dictModel, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException || err instanceof Exception_ttypes.RReturnNullException) {
        var result = new RDictTableService_updateDict_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateDict", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateDict", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

RDictTableServiceProcessor.prototype.process_getPDictById = function(seqid, input, output) {
  var args = new RDictTableService_getPDictById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPDictById.length === 3) {
    Q.fcall(this._handler.getPDictById, args.id, args.pStart, args.limit)
      .then(function(result) {
        var result = new RDictTableService_getPDictById_result({success: result});
        output.writeMessageBegin("getPDictById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException || err instanceof Exception_ttypes.RReturnNullException) {
          var result = new RDictTableService_getPDictById_result(err);
          output.writeMessageBegin("getPDictById", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPDictById", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPDictById(args.id, args.pStart, args.limit, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException || err instanceof Exception_ttypes.RReturnNullException) {
        var result = new RDictTableService_getPDictById_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getPDictById", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPDictById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

RDictTableServiceProcessor.prototype.process_getDictById = function(seqid, input, output) {
  var args = new RDictTableService_getDictById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDictById.length === 2) {
    Q.fcall(this._handler.getDictById, args.id, args.includeAll)
      .then(function(result) {
        var result = new RDictTableService_getDictById_result({success: result});
        output.writeMessageBegin("getDictById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException || err instanceof Exception_ttypes.RReturnNullException) {
          var result = new RDictTableService_getDictById_result(err);
          output.writeMessageBegin("getDictById", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDictById", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDictById(args.id, args.includeAll, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException || err instanceof Exception_ttypes.RReturnNullException) {
        var result = new RDictTableService_getDictById_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getDictById", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDictById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

RDictTableServiceProcessor.prototype.process_getAllDict = function(seqid, input, output) {
  var args = new RDictTableService_getAllDict_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllDict.length === 0) {
    Q.fcall(this._handler.getAllDict)
      .then(function(result) {
        var result = new RDictTableService_getAllDict_result({success: result});
        output.writeMessageBegin("getAllDict", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException || err instanceof Exception_ttypes.RReturnNullException) {
          var result = new RDictTableService_getAllDict_result(err);
          output.writeMessageBegin("getAllDict", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllDict", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAllDict(function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException || err instanceof Exception_ttypes.RReturnNullException) {
        var result = new RDictTableService_getAllDict_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getAllDict", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllDict", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

RDictTableServiceProcessor.prototype.process_queryDictOfFuzzy = function(seqid, input, output) {
  var args = new RDictTableService_queryDictOfFuzzy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryDictOfFuzzy.length === 2) {
    Q.fcall(this._handler.queryDictOfFuzzy, args.id, args.keyVal)
      .then(function(result) {
        var result = new RDictTableService_queryDictOfFuzzy_result({success: result});
        output.writeMessageBegin("queryDictOfFuzzy", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Exception_ttypes.RException || err instanceof Exception_ttypes.RReturnNullException) {
          var result = new RDictTableService_queryDictOfFuzzy_result(err);
          output.writeMessageBegin("queryDictOfFuzzy", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("queryDictOfFuzzy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryDictOfFuzzy(args.id, args.keyVal, function (err, result) {
      if (err == null || err instanceof Exception_ttypes.RException || err instanceof Exception_ttypes.RReturnNullException) {
        var result = new RDictTableService_queryDictOfFuzzy_result((err != null ? err : {success: result}));
        output.writeMessageBegin("queryDictOfFuzzy", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("queryDictOfFuzzy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

